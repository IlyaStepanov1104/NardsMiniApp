'use server'

import {NextRequest, NextResponse} from 'next/server'
import {getNames, parseFile} from '@/lib/parser'
import {mkdirSync} from 'fs'
import path from 'path'
import {randomUUID} from 'crypto'
import {TelegramBotAPI} from "@/lib/telegram";
import {promises as fs} from 'fs';

const miniAppUrl = process.env.MINI_APP_URL;

export async function POST(req: NextRequest) {
    const update = await req.json()

    const chat_id = update.message ? update.message.chat.id : update.callback_query.message.chat.id;

    const client = new TelegramBotAPI()

    if (update.message?.text === '/start') {
        await client.sendMessage(
            {chat_id: update.message.chat.id, text: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –∏–≥—Ä—ã –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞—Ä–¥—ã.'}
        )
        return NextResponse.json({ok: true})
    }

    if (update.message?.document) {
        const doc = update.message.document
        const dirName = randomUUID()
        mkdirSync('./tmp', {recursive: true})
        const filePath = path.join('./tmp', dirName);

        await client.sendMessage({
            chat_id,
            text: '–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...'
        })

        const fileUrl = await client.getFile(doc.file_id)
        const text = await client.downloadFile(fileUrl.file_path)
        await fs.writeFile(filePath, text, 'utf8');

        await client.sendMessage({
                chat_id,
                text: '–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é...'
            }
        );

        const names = await getNames(text);

        const buttons = [[
            {text: `–ó–∞ ${names[0]}`, callback_data: `choose_${filePath}_first`},
            {text: `–ó–∞ ${names[1]}`, callback_data: `choose_${filePath}_second`},
        ]];

        await client.sendMessage({
            chat_id,
            text: `–í—ã–±–µ—Ä–∏, –∑–∞ –∫–æ–≥–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç—á:`,
            reply_markup: {inline_keyboard: buttons}
        });
    }

    if (update.callback_query) {
        const chat_id = update.callback_query.message.chat.id;
        const data = update.callback_query.data; // –Ω–∞–ø—Ä–∏–º–µ—Ä: choose_{dir}_first
        const dirName = randomUUID()
        const uploadDir = path.join('', dirName)
        mkdirSync(uploadDir, {recursive: true})

        const [_, filePath, side] = data.split('_'); // ["choose", "{dir}", "first|second"]

        const text = await fs.readFile(filePath, "utf-8");
        // –ü–∞—Ä—Å–∏–º
        const games = await parseFile(text, dirName, side === 'second');

        const buttons = [[{
            text: `–û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É üì≤`,
            web_app: {url: (`${miniAppUrl}?game=${dirName}&chat_id=${chat_id}`)!},
        }]];

        await client.sendMessage({
                chat_id,
                text: '–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö–æ–¥—ã.',
                reply_markup: {
                    inline_keyboard: buttons
                }
            }
        )

        return NextResponse.json({ok: true})
    }

    return NextResponse.json({ok: true})
}
